# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2019-02-26 18:45
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Adres email')),
                ('is_client', models.BooleanField(default=False)),
                ('is_forecaster', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=100, verbose_name='Nazwa')),
                ('longitude', models.DecimalField(decimal_places=10, max_digits=13, validators=[django.core.validators.MaxValueValidator(180), django.core.validators.MinValueValidator(-180)], verbose_name='Długość geograficzna')),
                ('latitude', models.DecimalField(decimal_places=10, max_digits=12, validators=[django.core.validators.MaxValueValidator(90), django.core.validators.MinValueValidator(-90)], verbose_name='Szerokość geograficzna')),
            ],
        ),
        migrations.CreateModel(
            name='ClientForecastTypeOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin_date', models.DateTimeField(verbose_name='Data rozpoczęcia')),
                ('expire_date', models.DateTimeField(verbose_name='Data wygaśnięcia')),
                ('forecast_type_choice', models.CharField(choices=[('24', '24h'), ('48', '48h')], max_length=2)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.City', verbose_name='Miasto prognozy')),
            ],
        ),
        migrations.CreateModel(
            name='ForecastType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Data wykonania')),
                ('modification_date', models.DateTimeField(auto_now=True, null=True, verbose_name='Data modyfikacji')),
                ('count', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Numer prognozy')),
                ('status', models.CharField(choices=[('D', 'Draft'), ('A', 'Aktywne'), ('H', 'Archiwum')], default='D', max_length=1)),
            ],
            options={
                'manager_inheritance_from_future': True,
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('02', 'dolnośląskie'), ('04', 'kujawsko-pomorskie'), ('06', 'lubelskie'), ('08', 'lubuskie'), ('10', 'łódzkie'), ('12', 'małopolskie'), ('14', 'mazowieckie'), ('16', 'opolskie'), ('18', 'podkarpackie'), ('20', 'podlaskie'), ('22', 'pomorskie'), ('24', 'śląskie'), ('26', 'świętokrzyskie'), ('28', 'warmińsko-mazurskie'), ('30', 'wielkopolskie'), ('32', 'zachodniopomorskie')], max_length=2, verbose_name='Nazwa')),
            ],
        ),
        migrations.CreateModel(
            name='SynopticSituation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin_date', models.DateTimeField(verbose_name='Data rozpoczęcia')),
                ('finish_date', models.DateTimeField(verbose_name='Data zakończenia')),
                ('description', models.TextField(max_length=300, verbose_name='Opis')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Data wykonania')),
                ('modification_date', models.DateTimeField(auto_now=True, verbose_name='Data modyfikacji')),
            ],
        ),
        migrations.CreateModel(
            name='SynopticWarning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin_date', models.DateTimeField(blank=True, null=True, verbose_name='Data rozpoczęcia')),
                ('finish_date', models.DateTimeField(blank=True, null=True, verbose_name='Data zakończenia')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Opis')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Data wykonania')),
                ('modification_date', models.DateTimeField(auto_now=True, verbose_name='Data modyfikacji')),
            ],
        ),
        migrations.CreateModel(
            name='SynopticWarningCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, verbose_name='Nazwa')),
                ('danger_level', models.IntegerField(choices=[(0, 'NISKI'), (1, 'ŚREDNI'), (2, 'WYSOKI')], default=1, verbose_name='Poziom zagrożenia')),
                ('criteria', models.TextField(max_length=255, verbose_name='Kryterium')),
                ('effects', models.TextField(max_length=255, verbose_name='Efekty')),
                ('details', models.TextField(max_length=255, verbose_name='Szczegóły')),
            ],
        ),
        migrations.CreateModel(
            name='WeatherForecast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin_date', models.DateTimeField(blank=True, null=True, verbose_name='Data rozpoczęcia')),
                ('finish_date', models.DateTimeField(blank=True, null=True, verbose_name='Data zakończenia')),
                ('day_night', models.CharField(choices=[('D', 'Dzień'), ('N', 'Noc')], default='D', max_length=1, verbose_name='Dzień/noc')),
                ('description', models.TextField(blank=True, max_length=300, null=True, verbose_name='Opis')),
                ('clouds', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Zachmurzenie')),
                ('rainfall', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Opad deszczu')),
                ('snowfall', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Opad śniegu')),
                ('air_temp', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Temperatura powietrza')),
                ('dewpoint_temp', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Temperatura punktu rosy')),
                ('pressure', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Ciśnienie')),
                ('humidity', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Wilgotność')),
                ('wind_speed', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Prędkość wiatru')),
                ('wind_gusts', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Porywy wiatru')),
                ('wind_direction', models.CharField(blank=True, choices=[('N', 'Północny'), ('NE', 'Północno- wschodni'), ('E', 'Wschodni'), ('SE', 'Południowo- wschodni'), ('S', 'Południowy'), ('SW', 'Południowy- zachodni'), ('W', 'Zachodni'), ('NW', 'Północno- zachodni')], default='N', max_length=2, null=True, verbose_name='Kierunek wiatru')),
                ('sar_image', models.URLField(blank=True, null=True, verbose_name='Aktualne zdjęcie satelitarne')),
                ('synoptic_warning', models.ManyToManyField(blank=True, to='dashboard.SynopticWarning', verbose_name='Ostrzeżenie synoptyczne')),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Client',
            },
            bases=('dashboard.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Forecaster',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Forecaster',
            },
            bases=('dashboard.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OneDayForecast',
            fields=[
                ('forecasttype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dashboard.ForecastType')),
                ('weather_forecast1', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wf1', to='dashboard.WeatherForecast', verbose_name='Prognoza na dzień #1')),
                ('weather_forecast2', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wf2', to='dashboard.WeatherForecast', verbose_name='Prognoza na noc #1')),
            ],
            options={
                'manager_inheritance_from_future': True,
            },
            bases=('dashboard.forecasttype',),
        ),
        migrations.CreateModel(
            name='TwoDayForecast',
            fields=[
                ('forecasttype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dashboard.ForecastType')),
                ('weather_forecast1', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wf1_48', to='dashboard.WeatherForecast', verbose_name='Prognoza na dzień #1')),
                ('weather_forecast2', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wf2_48', to='dashboard.WeatherForecast', verbose_name='Prognoza na noc #1')),
                ('weather_forecast3', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wf3_48', to='dashboard.WeatherForecast', verbose_name='Prognoza na dzień #2')),
                ('weather_forecast4', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wf4_48', to='dashboard.WeatherForecast', verbose_name='Prognoza na noc #2')),
            ],
            options={
                'manager_inheritance_from_future': True,
            },
            bases=('dashboard.forecasttype',),
        ),
        migrations.AddField(
            model_name='synopticwarning',
            name='synoptic_warning_criteria',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.SynopticWarningCriteria'),
        ),
        migrations.AddField(
            model_name='forecasttype',
            name='forecast_type_order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.ClientForecastTypeOrder', verbose_name='Zamowienie klienta'),
        ),
        migrations.AddField(
            model_name='forecasttype',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_dashboard.forecasttype_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='city',
            name='province',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Province', verbose_name='Województwo'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='MasterForecaster',
            fields=[
                ('forecaster_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dashboard.Forecaster')),
            ],
            options={
                'verbose_name': 'Master forecaster',
            },
            bases=('dashboard.forecaster',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='synopticsituation',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='synopticsituation_created_by', to='dashboard.Forecaster', verbose_name='Wykonano przez'),
        ),
        migrations.AddField(
            model_name='synopticsituation',
            name='modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='synopticsituation_modified_by', to='dashboard.Forecaster', verbose_name='Zmodyfikowano przez'),
        ),
        migrations.AddField(
            model_name='forecasttype',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_by', to='dashboard.Forecaster', verbose_name='Wykonawca'),
        ),
        migrations.AddField(
            model_name='forecasttype',
            name='modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='modified_by', to='dashboard.Forecaster', verbose_name='Zmodyfikował'),
        ),
        migrations.AddField(
            model_name='clientforecasttypeorder',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Client', verbose_name='Klient'),
        ),
        migrations.AddField(
            model_name='clientforecasttypeorder',
            name='forecaster',
            field=models.ManyToManyField(to='dashboard.Forecaster', verbose_name='Odpowiedzialni meteorolodzy'),
        ),
        migrations.AddField(
            model_name='client',
            name='cities',
            field=models.ManyToManyField(to='dashboard.City'),
        ),
        migrations.AlterUniqueTogether(
            name='forecasttype',
            unique_together=set([('forecast_type_order', 'count')]),
        ),
    ]
